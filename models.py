from datetime import datetime
from db import db

# üë§ Utilisateur
class User(db.Model):
    __tablename__ = 'user'

    id = db.Column(db.Integer, primary_key=True)
    lastname = db.Column(db.String(80), nullable=False)   # Nom obligatoire
    firstname = db.Column(db.String(80), nullable=True)   # Pr√©nom facultatif
    email = db.Column(db.String(120), unique=True, nullable=True)  # facultatif
    phone = db.Column(db.String(20), unique=True, nullable=False)  # obligatoire
    password = db.Column(db.String(200), nullable=False)
    language = db.Column(db.String(10), default='fr')     # langue par d√©faut
    created_at = db.Column(db.DateTime, default=datetime.utcnow)   # timestamp UTC

    # üîÅ Relation avec les champs agricoles
    fields = db.relationship('Field', backref='user', lazy=True)


# üåæ Champ agricole
class Field(db.Model):
    __tablename__ = 'field'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    # Nom du champ (optionnel)
    name = db.Column(db.String(100), nullable=True)

    # Coordonn√©es du champ (issues de la carte)
    lat = db.Column(db.Float, nullable=False)
    lon = db.Column(db.Float, nullable=False)
    area = db.Column(db.Float, nullable=True)  # superficie en ha ou m¬≤, calcul√©e depuis la carte

    # Informations g√©ographiques (extraites automatiquement)
    country = db.Column(db.String(100), nullable=True)
    city = db.Column(db.String(100), nullable=True)

    # Type de culture associ√© (cl√© √©trang√®re)
    crop_type_id = db.Column(db.Integer, db.ForeignKey('crop_type.id'), nullable=True)

    created_at = db.Column(db.DateTime, default=datetime.utcnow)


# üåª Type de culture
class CropType(db.Model):
    __tablename__ = 'crop_type'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)  # nom unique de la culture (ex: Ma√Øs, Riz, Tomate)

    # Donn√©es agroclimatiques provenant des datasets
    optimal_temp = db.Column(db.Float, nullable=True)            # Temp√©rature optimale (¬∞C)
    optimal_soil_moisture = db.Column(db.Float, nullable=True)   # Humidit√© du sol optimale (%)
    cycle_days = db.Column(db.Integer, nullable=True)            # Dur√©e du cycle en jours

    # üîÅ Relation inverse avec Field
    fields = db.relationship('Field', backref='crop_type', lazy=True)


# üíß Historique des actions (Irrigation, Fertilisation, Alerte, etc.)
class History(db.Model):
    __tablename__ = 'history'

    id = db.Column(db.Integer, primary_key=True)
    field_id = db.Column(db.Integer, db.ForeignKey('field.id'), nullable=False)

    # Type d'action : 'irrigation', 'fertilisation', 'alerte', 'semis', 'recolte'
    type = db.Column(db.String(30), nullable=False)

    # Quantit√© associ√©e (litres, kg, etc.)
    quantity = db.Column(db.Float, nullable=True)

    # Date automatique (UTC)
    date = db.Column(db.DateTime, default=datetime.utcnow)

    # Notes / d√©tails additionnels
    notes = db.Column(db.Text, nullable=True)

    # Relation inverse
    field = db.relationship('Field', backref=db.backref('history', lazy=True))

# üåê Simulation des sc√©narios agricoles
class Simulation(db.Model):
    __tablename__ = 'simulation'

    id = db.Column(db.Integer, primary_key=True)
    field_id = db.Column(db.Integer, db.ForeignKey('field.id'), nullable=False)
    scenario_type = db.Column(db.String(50), nullable=False)  # ex: 'irrigation', 'fertilisation', 's√©cheresse'
    result_summary = db.Column(db.Text, nullable=True)         # description du r√©sultat de la simulation
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relation avec le champ
    field = db.relationship('Field', backref=db.backref('simulations', lazy=True))


# ‚ö†Ô∏è Alertes / Notifications
class Alert(db.Model):
    __tablename__ = 'alert'

    id = db.Column(db.Integer, primary_key=True)
    field_id = db.Column(db.Integer, db.ForeignKey('field.id'), nullable=False)
    type = db.Column(db.String(50), nullable=False)           # ex: 'alerte m√©t√©o', 'alerte irrigation'
    message = db.Column(db.Text, nullable=False)
    sent_via = db.Column(db.String(20), nullable=True)        # ex: SMS, WhatsApp, USSD
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relation avec le champ
    field = db.relationship('Field', backref=db.backref('alerts', lazy=True))


# ü§ñ Chatbot messages ou logs
class ChatbotMessage(db.Model):
    __tablename__ = 'chatbot_message'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    message = db.Column(db.Text, nullable=False)             # message envoy√© par l'utilisateur
    response = db.Column(db.Text, nullable=True)             # r√©ponse g√©n√©r√©e par le bot
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relation avec l'utilisateur
    user = db.relationship('User', backref=db.backref('chatbot_messages', lazy=True))